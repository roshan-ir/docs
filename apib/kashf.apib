FORMAT: 1A
HOST: https://kashf.roshan-ai.ir

# کشف
<b>کشف</b>، مثال‌هایی از یک مفهوم را می‌گیرید و بعد همان مفهوم را در داده‌های جدید پیدا می‌کند. مثلاً به کشف یاد می‌دهید که جملات خیلی عالی بود، سه ماهه خریدم مشکلی نداشتم و این محصول را پیشنهاد می‌کنم، چند نمونه از مفهوم رضایت از خرید کالا است. یا عکس‌هایی از حرم رضوی یا آقای رئیسی را نشان می‌دهید و می‌گویید این‌ها تصویر حرم یا آقای رئیسی است.

با این آموزش‌ها، کشف به‌مرور بالغ‌تر می‌شود و می‌تواند مفاهیم پنهان در دل داده‌های متنی، تصویری یا حتی ویدیویی را کشف کند. کشف همانند کودک در‌حال‌رشدی است که هرچه مثال‌های بیشتری ببیند بهتر می‌تواند مفاهیم را شناسایی و از هم تفکیک کند.

برای دسترسی به ای‌پی‌آی، به یک `TOKEN_KEY` نیاز دارید که می‌توانید از طریق ایمیلِ <a href="mailto:kashf@roshan-ai.ir">kashf@roshan-ai.ir</a> درخواست دهید.

## اصطلاحات
در این مستندات از اصطلاحات مختلفی استفاده می‌کنیم که در این بخش به شرح هر یک می‌پردازیم. پیشنهاد می‌کنیم قبل از مطالعهٔ مستندات این قسمت را به دقت مطالعه کنید.

### دیتاست (dataset)
دیتاست مجموعه‌ای از داده‌هاست که قرار است فرایند یادگیری ماشین روی آن انجام شود. کشف با سه نوع دیتاست سروکار دارد: اولی دیتاست متنی است که فقط حاوی داده‌های متنی است مثل نظرات دیجی‌کالا؛ دومی دیتاست تصویری است که حاوی تصاویر است مثل تصاویر امکان تاریخی ایران؛ سومی دیتاست چهره‌ها است که حاوی تصاویر چهره‌هاست مثل تصاویر سیاسیون.

## برچسب (tag)
برچسب نمایندهٔ یک مفهوم است. مثلاً در یک دیتاست متنی برای نوشتهٔ «بعد از یک هفته از کار افتاد.» می‌توان از دو برچسب «نارضایتی از خرید» و «کالای معیوب» استفاده کرد، یا در یک دیتاست تصویری برای تصویر حرم رضوی می‌توان از برچسب «حرم رضوی» استفاده کرد، یا در یک دیتاست چهره می‌توان برای عکس آقای رئیسی از برچسب «سیدابراهیم رئیسی» استفاده کرد. 

در کشف، هر برچسب دارای یک پارامتر `positive` است که به معنی تعلق یک برچسب به یک داده است. مثلاً در جملهٔ «بعد از یک هفته از کار افتاد» برچسب «رضایت از خرید» صدق می‌کند (positive=true) ولی برچسب «نارضایتی از خرید» صدق نمی‌کند (positive=false).

## گزارش (report)
گزارش یک برچسب‌گذاری صریح از سوی ناظر انسانی است. شما صریحاً به ماشین گزارش می‌دهید که فلان داده با چه برچسب‌هایی در ارتباط هست یا با چه برچسب‌هایی در ارتباط نیست. با این کار ماشین بین گزارش شما و داده‌های نمونه، روابط پنهان را کشف می‌کند و در تشخیص‌های آتی استفاده می‌کند. در زندگی واقعی، پاسخ‌های ما به برخی از سوالات کودکان دقیقاً نقش همین گزارش را بازی می‌کند. به عنوان مثال، به کودک یاد می‌دهید که این دوچرخه است، آن ماشین است، این رنگ آبی است، آن رنگ آبی نیست و ... .

## ساخت برچسب [/api/create_tag/]
برچسب جدید می‌سازد.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید برچسب در آن ساخته شود.
        - title: (string, required) - عنوان برچسب
        - active: true (boolean) -  اگر `false` باشد گزارش‌های مربوط به این برچسب در فرایند یادگیری ماشین به‌کار گرفته نمی‌شود. مقدار پیش‌فرض: `true`.
    + Body
            {
              "dataset": "iran",
              "title": "New Place"
            }
+ Response 200 (application/json)
        {
          "title": "New Place",
          "tag_id": 111111111,
          "active": true
        }

## ویرایش برچسب [/api/update_tag/]
اطلاعات یک برچسب را ویرایش می‌کند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - tag_"id": tad id (number, required) - شناسهٔ برچسبی که می‌خواهید اطلاعات آن را ویرایش کنید. شناسهٔ برچسب‌ها را می‌توانید از طریق تابع <a href="#d447349868">وضعیت دیتاست</a> پیدا کنید.
        - dataset: dataset slug (string, required) - نام دیتاستی که برچسب در آن تعریف شده است.
        - title: (string, required) - عنوان برچسب.
        - active: true (boolean) -  اگر `false` باشد گزارش‌های مربوط به این برچسب در فرایند یادگیری ماشین به‌کار گرفته نمی‌شود. مقدار پیش‌فرض: `true`.
    + Body
            {
              "dataset": "iran",
              "tag_id": 111111111,
              "title": "Old Place",
              "active": true
            }
+ Response 200 (application/json)
        {
          "title": "Old Place",
          "tag_id": 111111111,
          "active": true
        }

## حذف برچسب [/api/delete_tag/]
یک برچسب را حذف می‌کند. در پاسخ برگشتی، پارامتر `deleted_reports` بیانگر تعداد گزارش‌های است که با حذف برچسب، از بین رفته‌اند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - tag_"id": tad id (number, required) - شناسهٔ برچسبی که می‌خواهید حذف کنید. شناسهٔ برچسب‌ها را می‌توانید از طریق تابع <a href="#d447349868">وضعیت دیتاست</a> پیدا کنید.
    + Body
            {
              "tag_id": 111111111
            }
+ Response 200 (application/json)
        	  {
              "dataset": "iran",
              "deleted_reports": 0
            }

## ثبت گزارش متنی [/api/report_text_tags/]
برای یک برچسب متنی، گزارش جدیدی ثبت می‌کند. مثلاً به ماشین می‌گویید نمونهٔ متنی «بسته‌بندی عالی بود.» مرتبط با برچسب «رضایت از خرید» و نامرتبط با برچسب «نارضایتی از خرید» است. مرتبط یا نامرتبط بودن برچسب را با تنظیم پارامتر `positive` اعلام می‌کنیم. بعداً ماشین از روی این گزارش‌ها درس می‌گیرید. پارامتر `id` در پاسخ برگشتی، شناسهٔ یکتای متنی است که گزارش داده‌اید. بعداً می‌توانید با تابع <a href="#8577413627">حذف گزارش</a> و ارائهٔ این شناسه، آن را از فهرست گزارش‌ها حذف کنید.  

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - content: (string, required) - متنی که می‌خواهید گزارش دهید.
        - tag_"id":  (number, required) - شناسهٔ برچسبی که می‌خواهید به متن بزنید. شناسهٔ برچسب‌ها را می‌توانید از طریق تابع <a href="#d447349868">وضعیت دیتاست</a> پیدا کنید.
        - positive: true (boolean) -  اگر `true` (مقدار پیش‌فرض) باشد این برچسب را به عنوان یک برچسب مرتبط با متن گزارش می‌دهد و اگر `false` باشد این برچسب را به عنوان یک برچسب نامرتبط با متن گزارش می‌دهد. گاهی لازم است برای یادگیری بهتر ماشین اعلام کنید که فلان متن با چه برچسب‌هایی در ارتباط نیست.
    + Body
            [
              {
                "content": "پیشنهاد میکنم از این بخرید خیلی عالیه.",
                "tag_id": 39,
                "positive": true
              }
            ]
+ Response 200 (application/json)
        [
          {
            "report": "[[39,true]]",
            "id": 1211592
          }
        ]

## ثبت گزارش تصویری [/api/report_image_tags/]
همانند <a href="#ee264f8d93">ثبت گزارش متنی</a> است با این تفاوت که اینجا به جای متن، تصویر گزارش می‌دهید.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - image_url: URL (string, required) - آدرس تصویری که می‌خواهید گزارش دهید.
        - tag_"id": ID (number, required) - شناسهٔ برچسبی که می‌خواهید به تصویر بزنید. شناسهٔ برچسب‌ها را می‌توانید از طریق تابع <a href="#d447349868">وضعیت دیتاست</a> پیدا کنید.
        - positive: true (boolean) -  اگر `true` (مقدار پیش‌فرض) باشد این برچسب را به عنوان یک برچسب مرتبط با متن گزارش می‌دهد و اگر `false` باشد این برچسب را به عنوان یک برچسب نامرتبط با متن گزارش می‌دهد. گاهی لازم است برای یادگیری بهتر ماشین اعلام کنید که فلان متن با چه برچسب‌هایی در ارتباط نیست.
    + Body
            [
              {
                "image_url": "https://upload.wikimedia.org/wikipedia/fa/thumb/5/54/Tehran-Milad_Tower2.jpg/800px-Tehran-Milad_Tower2.jpg",
                "tag_id": 3,
                "positive": true
              }
            ]
+ Response 200 (application/json)
        [
          {
            "report": "[[3,true]]",
            "id": 1211593
          }
        ]

## حذف گزارش [/api/remove_tag_report/]
یک گزارش را حذف می‌کند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes    
        - text_"id": (number) - شناسهٔ متن گزارش‌شده که می‌خواهید حذف کنید. این شناسه را می‌توانید از طریق تابع <a href="#d447349868">فهرست گزارش‌های برچسب</a> پیدا کنید.
        - image_"id": (number) - شناسهٔ تصویر گزارش‌شده که می‌خواهید حذف کنید. این شناسه را می‌توانید از طریق تابع <a href="#d447349868">فهرست گزارش‌های برچسب</a> پیدا کنید.
        - tag_"id": (number, required) - یک متن یا تصویر می‌تواند چندین برچسب بخورد. با کمک این پارامتر اعلام می‌کنید که متن یا تصویری که می‌خواهید حذف کنید مربوط به کدام برچسب است.   
    + Body
            {
                "image_id": 1211593,
                "tag_id": 3
            }
+ Response 200 (application/json)
        {
          "image_id": 1211593,
          "tag_id": 3
        }

## برچسب‌گذاری متون [/api/tag_texts/]
بعد از اینکه ماشین با کمک گزارش‌های ورودی به سطح قابل قبولی از آگاهی رسید می‌تواند به پشتوانهٔ این آگاهی، به داده‌های جدید برچسب بزند. این تابع، یک دیتاست و تعدادی متن را به‌عنوان ورودی می‌گیرد و در پاسخ، برچسب‌های پیشنهادی را به‌همراه دقت تشخیص (`probability`) برای هر متن برمی‌گرداند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: slug (string, required) - نام دیتاست.
        - contents: content (array[string], required) - متن‌هایی که می‌خواهید برچسب‌گذاری شود.
        - wait: true (boolean) - اگر `true` باشد (مقدار پیش‌فرض)، تا پایان فرایند پردازش باید منتظر بمانید. اگر `false` باشد، بلافاصله بعد از ارسال درخواست، پاسخی با اعلام وضعیتِ `processing` ارسال می‌شود و در درخواست‌های بعدی اگر نتیجه آماده بود برگردانده می‌شود و اگر نه همچنان روی `processing` خواهد بود.
        - tree_based: false (boolean) - برچسب‌گذاری به روش درختی.
    + Body
            {
                "dataset": "digikala",
                "contents": ["ارزش خریدنش رو بی شک داره", "اصلا اصلا کیفیت نداره رنگش بااین عکس زمین تاآسمون فرق داره"]
            }
+ Response 200 (application/json)
        [
          {
            "content": "ارزش خریدنش رو بی شک داره",
            "tags": [
              {
                "id": 39,
                "probability": 1.0,
                "title": "توصیه خرید"
              }
            ]
          },
          {
            "content": "اصلا اصلا کیفیت نداره رنگش بااین عکس زمین تاآسمون فرق داره",
            "tags": [
              {
                "id": 56,
                "probability": 1.0,
                "title": "عدم رضایت بعد خرید"
              }
            ]
          }
        ]

## برچسب‌گذاری تصاویر [/api/tag_images/]
همانند تابع <a href="#ee264f8d93">برچسب‌گذاری متون</a> است با این تفاوت که اینجا به جای مجموعه‌ای از متن‌ها، مجموعه‌ای از تصاویر می‌دهید. در پاسخ، برای هر تصویر، برچسب یا برچسب‌هایی تولید می‌شود. برای این تابع می‌توانید به جای آدرس تصویر، فایل تصویر را به‌طورمستقیم و در قالب تقاضای multipart/form-data ارسال نمایید.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - dataset: slug (string, required) - نام دیتاست.
        - image_urls: URL (array[string], required) - تصاویری که می‌خواهید برچسب‌گذاری شود. 
        - wait: true (boolean) - اگر `true` باشد (مقدار پیش‌فرض)، تا پایان فرایند پردازش باید منتظر بمانید. اگر `false` باشد، بلافاصله بعد از ارسال درخواست، پاسخی با اعلام وضعیتِ `processing` ارسال می‌شود و در درخواست‌های بعدی اگر نتیجه آماده بود برگردانده می‌شود و اگر نه همچنان روی `processing` خواهد بود.
    + Body
            {
                "dataset": "iran",
                "image_urls": ["https://media.mehrnews.com/d/2016/08/13/4/2171627.jpg", "https://upload.wikimedia.org/wikipedia/commons/e/e4/City_Theater_of_Tehran_2019_4.jpg"]
            }
+ Response 200 (application/json)
        [
          {
            "image_url": "https://media.mehrnews.com/d/2016/08/13/4/2171627.jpg",
            "tags": [
              {
                "id": 1,
                "probability": 1.0,
                "title": "حرم رضوی"
              }
            ]
          },
          {
            "image_url": "https://upload.wikimedia.org/wikipedia/commons/e/e4/City_Theater_of_Tehran_2019_4.jpg",
            "tags": [
              {
                "id": 36,
                "probability": 1.0,
                "title": "تئاتر شهر"
              }
            ]
          }
        ]

## برچسب‌گذاری تصاویر چهره [/api/tag_faces/]
این تابع نیز همانند تابع <a href="#d03b0a053a">برچسب‌گذاری تصاویر</a> است منتهی اینجا تصاویری از چهره‌ها به آن می‌دهید. اینجا نیز می‌توانید به جای آدرس تصویر، فایل تصویر را به‌طورمستقیم و در قالب تقاضای multipart/form-data ارسال نمایید.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - dataset: slug (string, required) - نام دیتاست.
        - image_urls: URL (array[string], required) - تصاویری که می‌خواهید چهره‌های داخلِ آن‌ها شناسایی شود. 
        - wait: true (boolean) - اگر `true` باشد (مقدار پیش‌فرض)، تا پایان فرایند پردازش باید منتظر بمانید. اگر `false` باشد، بلافاصله بعد از ارسال درخواست، پاسخی با اعلام وضعیتِ `processing` ارسال می‌شود و در درخواست‌های بعدی اگر نتیجه آماده بود برگردانده می‌شود و اگر نه همچنان روی `processing` خواهد بود.
    + Body
            {
                "dataset": "faces",
                "image_urls": ["https://media.mehrnews.com/d/2021/12/26/3/4002104.jpg"]
            }
+ Response 200 (application/json)
        [
          {
            "image_url": "https://media.mehrnews.com/d/2016/08/13/4/2171627.jpg",
            "tags": [
              {
                "id": 328742,
                "probability": 1.0,
                "title": "حسین امیرعبداللهیان (سیاسی)"
              }
            ]
          }
        ]

## برچسب‌گذاری فریم‌های ویدئو [/api/tag_video_frames/]
یک ویدیو را با تنظیمات دلخواه، به فریم‌های مختلف می‌شکند و هر فریم را همانند تابع <a href="#d03b0a053a">برچسب‌گذاری تصویر</a> برچسب‌گذاری می‌کند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - dataset: slug (string, required) - نام دیتاست.
        - video_urls: URL (array[string], required) - آدرس ویدیوهایی که می‌خواهید فریم‌های آن برچسب‌گذاری شود. 
        - every_ms: 100 (number) - هر چند میلی‌ثانیه یک فریم استخراج شود؟
        - min_frame_diff: 0.4 (number) - کمترین تفاوتِ دو فریم که از آن به بعد یک فریم را متفاوت از قبلی بداند. عددی بین ۰ تا ۱. 
        - duration: null (number) - چندثانیه از ابتدای ویدیو پردازش شود؟ اگر `null` باشد کل ویدیو پردازش می‌شود.
        - wait: true (boolean) - اگر `true` باشد (مقدار پیش‌فرض)، تا پایان فرایند پردازش باید منتظر بمانید. اگر `false` باشد، بلافاصله بعد از ارسال درخواست، پاسخی با اعلام وضعیتِ `processing` ارسال می‌شود و در درخواست‌های بعدی اگر نتیجه آماده بود برگردانده می‌شود و اگر نه همچنان روی `processing` خواهد بود.
    + Body
            {
                "dataset": "iran",
                "every_ms": 50,
                "duration": 25,
                "min_frame_diff": 0.40,
                "video_urls": ["https://as-v2.tamasha.com/statics/videos_download/8c/36/0GEqm_8c3618c60750148cf0131e27c055245cf0e8ca74_n_360.mp4"]
            }
+ Response 200 (application/json)
        [
          {
            "video_url": "https://as-v2.tamasha.com/statics/videos_download/8c/36/0GEqm_8c3618c60750148cf0131e27c055245cf0e8ca74_n_360.mp4",
            "frames": [
              {
                "frame": 849,
                "time": "0:00:33",
                "tags": [
                  {
                    "id": 48,
                    "probability": 1,
                    "title": "میدان آزادی"
                  }
                ]
              }
            ]
          }
        ]

## برچسب‌گذاری چهره‌های ویدئو [/api/tag_video_faces/]
همانند تابع <a href="#9ec794253b">برچسب‌گذاری فریم‌های ویدیو</a> است، با این تفاوت که اینجا مجموعه‌ای از ویدیوها می‌دهید که حاوی تصاویر چهره‌هاست.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاست.
        - video_urls: URL (array[string], required) - آدرس ویدیوهایی که می‌خواهید فریم‌های آن برچسب‌گذاری شود.
        - every_ms: 100 (number) - هرچند میلی‌ثانیه یک فریم استخراج شود؟
        - min_frame_diff: 0.4 (number) - کمترین تفاوتِ دو فریم که از آن به بعد یک فریم را متفاوت از قبلی بداند. عددی بین ۰ تا ۱.
        - duration: 25 (number) - چندثانیه از ابتدای ویدیو پردازش شود؟ اگر `null` باشد همهٔ ویدیو پردازش می‌شود.
        - wait: true (boolean) - اگر `true` باشد (مقدار پیش‌فرض)، تا پایان فرایند پردازش باید منتظر بمانید. اگر `false` باشد، بلافاصله بعد از ارسال درخواست، پاسخی با اعلام وضعیتِ `processing` ارسال می‌شود و در درخواست‌های بعدی اگر نتیجه آماده بود برگردانده می‌شود و اگر نه همچنان روی `processing` خواهد بود.
    + Body
            {
                "dataset": "faces",
                "every_ms": 50,
                "duration": 25,
                "min_frame_diff": 0.40,
                "video_urls": ["https://s-v4.tamasha.com/statics/videos_download/56/29/Z8PY1_5629c73df85df766f52f0f6e46277b4bba83769f_n_576.mp4"]
            }
+ Response 200 (application/json)
        [
          {
            "video_url": "https://s-v4.tamasha.com/statics/videos_download/56/29/Z8PY1_5629c73df85df766f52f0f6e46277b4bba83769f_n_576.mp4",
            "frames": [
              {
                "frame": 125,
                "time": "0:00:04",
                "faces": [
                  {
                    "left": 419,
                    "top": 76,
                    "width": 164,
                    "height": 221,
                    "cx": 486,
                    "cy": 197,
                    "angle": 1.35,
                    "tags": [
                              {
                        "id": 328742,
                        "probability": 0.91,
                        "title": "حسین امیرعبداللهیان (سیاسی)"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]


## برچسب‌گذاری کل ویدئو [/api/tag_videos/]
به جای برچسب‌گذاری تک‌تک فریم‌ها، کل ویدیو را پردازش می‌کند و برای آن فهرستی از برچسب‌ها تولید می‌کند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاست.
        - video_urls: URL (array[string], required) - آدرس ویدیوهایی که می‌خواهید برچسب‌گذاری کنید. 
        - wait: true (boolean) - اگر `true` باشد (مقدار پیش‌فرض)، تا پایان فرایند پردازش باید منتظر بمانید. اگر `false` باشد، بلافاصله بعد از ارسال درخواست، پاسخی با اعلام وضعیتِ `processing` ارسال می‌شود و در درخواست‌های بعدی اگر نتیجه آماده بود برگردانده می‌شود و اگر نه همچنان روی `processing` خواهد بود.
    + Body
            {
                "dataset": "iran",
                "video_urls": ["https://as-v2.tamasha.com/statics/videos_download/4b/44/b5X37_4b44bd799670dd01fd5019e44e514dc7e39269b8_n_462.mp4"]
            }
+ Response 200 (application/json)


## آموزش مدل [/api/train_dataset/]
با فرخوانی این تابع، یادگیری ماشین روی دیتاست آغاز می‌شود. در خروجی، وضعیت آموزش برگردانده می‌شود. این وضعیت در ابتدا روی `waiting` است که به معنی انتظار برای تخصیص منابع برای شروع پردازش و آموزش است و اندکی بعد به `training` تغییر می‌کند که به معنی شروع فرایند آموزش است و بعد از پایان آموزش به `trained` تغییر می‌کند.

در آموزش مدل، گزارش‌ها و برچسب‌های اعلامی از سوی ما تحت بررسی قرار گرفته و با مقایسه و تشخیص روابط بین داده‌ها، به دانش ماشین اضافه می‌شود. این دانش بعداً به ماشین کمک می‌کند تا برای داده‌های جدید اظهار نظر کند و بگوید مثلاً فلان جمله یا تصویر با کدام برچسب‌ها در ارتباط است. 

وقتی شما به یک کودک، چند تصویرِ مختلف از یک خودرو را نشان می‌دهید و به این طریق، مفهوم «خودرو» را به او آموزش می‌دهید، آن کودک بعداً می‌تواند با مشاهدهٔ هر خودرویی مفهوم خودرو را تشخیص داده و این مفهوم را از مفاهیم دیگری مثل «دوچرخه»  و «موتورسیکلت» تمیز دهد. سامانه‌های یادگیری ماشینی از جمله کشف نیز کم‌وبیش به‌همین‌شیوه عمل می‌کنند. این الگوریتم‌ها با دریافت مجموعه‌ای از داده‌ها و آموزش‌های ابتدایی، روابط بین پارامترها و مقادیر را تشخیص داده و می‌توانند برای داده‌های جدید اظهار نظر کنند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: slug (string, required) - نام دیتاستی که فرایند آموزش روی آن صورت می‌گیرد.
    + Body
            {
                "dataset": "iran"
            }
+ Response 200 (application/json)
        {
            "dataset": "iran",
            "state": "waiting"
        }

## بازبینی مدل [/api/retag_dataset/]
با فراخوانی این تابع، فرآیند بازبینی داده‌های موجود در مجموعه داده آغاز می‌شود. در فرآیند بازبینی، سامانه با استفاده از مدل یادگیری ماشین، مجدداً تعدادی از داده‌ها را برچسب‌گذاری می‌کند. این تابع معمولا بعد از آموزش مدل جدید به کار می‌رود. با بازبینی داده‌ها، شاید برچسب برخی از نمونه‌ها تغییر کند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید بازبینی مدل روی آن انجام شود.
        - max_predictions: maximum retags (number, required) - حداکثر تعداد داده‌هایی که می‌خواهید بازبینی شود.
    + Body
            {
                "dataset": "iran",
                "max_predictions": 100
            }
+ Response 200 (application/json)
        {
            "dataset": "iran",
            "state": "waiting"
        }

## اضافه‌کردن داده به دیتاست [/api/import_dataset/]
مجموعه‌ای از داده‌های جدید را در قالب یک فایل csv به دیتاست موردنظر اضافه می‌کند. به جای آدرس فایل csv می‌توانید فایل را به طور مستقیم و در قالب یک تقاضای multipart/form-data ارسال کنید.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید به داده‌های آن بیفزایید.
        - csv_url: imported file URL (string, required) -  آدرس فایل csv.
        - report_items: true (boolean) - اگر `true` باشد تمام داده‌های ورودی را به عنوان گزارش ثبت می‌کند.
    + Body
            {
                "dataset": "iran",
                "report_items": true,
                "tag_names": true
            }
+ Response 200 (application/json)
        {
            "dataset": "iran",
            "state": "waiting"
        }

## وضعیت دیتاست [/dataset_info/]
خلاصه‌وضعیتی از داده‌ها و روند آموزش و ارزیابی‌های انجام‌شده را در یک دیتاست برمی‌گرداند. در پاسخ برگشتی پارامتر `title` نام دیتاست را نشان می‌دهد، data_count تعداد داده‌های دیتاست است، `report_count` تعداد گزارش‌ها را اعلام می‌کند، `evaluation` وضعیت ارزیابی را مشخص می‌کند که خود شامل دو زیرپارامتر `precision` دقت و `recall` فراخوانی است. همچنین پارامتر `state` وضعیت پردازش فعلی روی دیتاست را نشان می‌دهد که از یکی از این مقادیر خارج نیست: `waiting` در انتظار تخصیص منابع، `training` در حال آموزش، `trained` پایان آموزش، `retagging` درحال بازبینی مدل و برچسب‌گذاری مجدد، `retagged` پایان بازبینی. 
در نهایت پارامتر tags را داریم که فهرستی از برچسب‌های تعریف شده را روی دیتاست نشان می‌دهد. هر یک از tagها شامل `id` شناسهٔ برچسب، `title` عنوان برچسب، `active` فعال یا غیرفعال بودن برچسب، `reports` تعداد گزارش‌های برچسب، `predictions` تعداد پیش‌بینی‌های برچسب و `evaluation` وضعیت ارزیابی برچسب است.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - dataset:  dataset slug (string, required) - نام دیتاستی که می‌خواهید خلاصه وضعیت آن را دریافت کنید.
        - tags: true (boolean) - اگر `true‍` باشد فهرست برچسب‌ها و وضعیت هر یک از آن‌ها را نیز نشان می‌دهد.
    + Body
            {
                "dataset": "iran",
                "tags": true
            }
+ Response 200 (application/json)
        {
          "title": "لحظه",
          "state": "trained",
          "report_count": 935,
          "data_count": 2404,
          "evaluation": {
            "recall": 87,
            "precision": 91
          },
          "tags": [
            {
              "title": "برج میلاد"
              "id": 3,
              "reports": 116,
              "predictions": 156,
              "evaluation": {
                "recall": 80.3,
                "precision": 91.4,
                "f1": 86.0
              },
            },
            ...
          ]
        }       

## فهرست تشخیص‌ها [/api/list_tag_predictions/]
کشف در فرایند آموزش و بازبینی، برخی از داده‌های دیتاست را به تشخیص خود برچسب‌گذاری می‌کند. این تابع، داده‌هایی را که برچسبِ ورودی به آن الصاق شده برمی‌گرداند. نتایج این تابع صفحه‌بندی‌شده است و در هر صفحه نهایتاً ۵۰ نتیجه وجود دارد. با افزودن پارامتر `page`به انتهای آدرس می‌توانید به نتایج صفحات بعدی دسترسی پیدا کنید. در پاسخ برگشتی، تعداد کل نتایج در پارامتر `count`، آدرس صفحهٔ بعد در پارامتر `next` و آدرس صفحهٔ بعد در پارامتر `previous` قرار گرفته است.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - dataset: slug (string, required) - نام دیتاست. 
        - tag_"id": tad id (number, required) - شناسهٔ برچسب.
    + Body
            {
              "dataset": "iran",
              "tag_id": 2
            }
+ Response 200 (application/json)
        {
          "count": 111,
          "next": "[base_url]/api/list_tag_predictions/?page=2",
          "previous": null,
          "results": [{"id": 1385,…}, {"id": 1873984,…},…]
        }
 
## فهرست گزارش‌ها [/api/list_tag_reports/]
با دریافت شناسهٔ یک برچسب، فهرستی از گزارش‌های حاوی این برچسب را برمی‌گرداند. نتایج این تابع همانند تابع <a href="#4cca5c6c3c">فهرست تشخیص‌ها</a> صفحه‌بندی شده و پاسخ برگشتی نیز همانند آن است.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - tag_"id": tad id (number, required) - شناسهٔ برچسبی که می‌خواهید گزارش‌های مربوط به آن برگردانده شود.
        - reported_positive: None (boolean) - اگر `true` باشد فقط گزارش‌هایی را برمی‌گرداند که مقدار `positive` آن برابر `true` است. اگر `false` باشد فقط گزارش‌هایی را برمی‌گرداند که مقدار `positive` آن برابر `false` است. اگر این پارامتر ارسال نشود همهٔ گزارش‌ها را صرفنظر از مقدار `positive` برمی‌گرداند.
    + Body
            {              
              "tag_id": 2
            }
+ Response 200 (application/json)
        {
          "count": 201,
          "next": "[base_url]/api/list_tag_reports/?page=2",
          "previous": null,
          "results": [{"image": {"id": 1832, "url": "http://cdn-tehran.wisgoon.com/dlir-s3/10531458126211291615.jpg",…},…},…]
        }

## فهرست گزارش‌های مشکوک [/api/list_tag_notsure_reports/]
گزارش مشکوک، گزارشی است که برچسبی که مدل برای آن تشخیص داده با برچسبی که ما گزارش داده‌ایم متفاوت است. نتایج این تابع نیز صفحه‌بندی شده و پاسخ برگشتی آن مشابه تابع <a href="#4cf309cf19">فهرست گزارش‌ها</a> است.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY    
    + Attributes
        - tag_"id": tad id (number, required) - شناسهٔ برچسبی که می‌خواهید گزارش‌های مشکوکِ حاوی این برچسب را دریافت کنید.
        - reported_positive: None (boolean) - اگر `true` باشد فقط گزارش‌هایی را برمی‌گرداند که مقدار `positive` آن برابر `true` است. اگر `false` باشد فقط گزارش‌هایی را برمی‌گرداند که مقدار `positive` آن برابر `false` است. اگر این پارامتر ارسال نشود همهٔ گزارش‌ها را صرفنظر از مقدار `positive` برمی‌گرداند.
    + Body
            {
              "tag_id": 2
            }
+ Response 200 (application/json)
        {
          "count": 201,
          "next": "[base_url]/api/list_tag_reports/?page=2",
          "previous": null,
          "results": [{"image": {"id": 1832, "url": "http://cdn-tehran.wisgoon.com/dlir-s3/10531458126211291615.jpg",…},…},…]
        }

## فهرست دیتاست‌ها [/api/list_datasets/]
فهرست تمام دیتاست‌ها را برمی‌گرداند. در پاسخ برگشتی، برای هر دیتاست، نام آن در پارامتر `title`، نوع آن در پارامتر `type`، نام انگلیسی آن در پارامتر `slug`، تعداد برچسب‌ها در پارامتر `tag_count`، تعداد گزارش‌ها در پارامتر `reported_count`، وضعیت آموزش یا بازبینی مدل در پارامتر `state` و وضیت ارزیابی مدل در پارامتر `evaluation` قرار می‌گیرد.

### نمونه [GET]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY  
+ Response 200 (application/json)
        [{
            "title": "ایران",
            "type": "image-tag",
            "slug": "iran",
            "tag_count": 21,
            "report_count": 2526,
            "state": "trained",
            "evaluation": {"precision": 0.94 , "recall": 0.87},
            "trained_at": ""
          }, ...]


## فهرست داده‌های متنی [/api/list_texts/]
شناسهٔ داده‌ها را دریافت می‌کند و برای هر شناسه، محتوای آن را در پارامتر `content`، برچسب‌های آن را در پارامتر `data` و آخرین تاریخ و زمان پردازش داده را در پارامتر `processed` برمی‌گرداند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید داده‌های متنی آن را دریافت کنید.
        - text_ids: list (number, required) - فهرست شناسهٔ داده‌ها.
    + Body
        {
          "dataset": "persica",
          "text_ids": [11462988]
        }
+ Response 200 (application/json)
        [{
            "count": 234,
            "results": [{"text": {"id": 11462988,…},…}] 
          }, ...]

## فهرست داده‌های تصویری [/api/list_images/]
همانند تابع <a href="#ca2d5ce011">فهرست داده‌های متنی</a> است با این تفاوت که اینجا به جای شناسهٔ متن‌ها، شناسهٔ تصاویر را می‌دهید و در پاسخ به‌جای متن‌ها، آدرس تصاویر را دریافت می‌کنید.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید فهرست داده‌های تصویری آن را دریافت کنید.
        - images_ids: list (number, required) - فهرست شناسهٔ تصاویر. 
    + Body
        {
          "dataset": "iran",
          "text_ids": [1832]
        } 
+ Response 200 (application/json)
        {
          "count": 201,
          "results": [{"image": {"id": 1832, "url": "http://cdn-tehran.wisgoon.com/dlir-s3/10531458126211291615.jpg",…}]
        }

## جستجو در داده‌های متنی [/api/search_candidate_texts/]
متنی را می‌گیرد و فهرستی از داده‌های حاوی آن متن را برمی‌گرداند. نتایج این تابع همانند تابع <a href="#4cca5c6c3c">فهرست تشخیص‌ها</a> صفحه‌بندی‌شده و همراه با آدرس صفحات بعدی و قبلی در پارامترهای `next` و `previous` بازگردانده می‌شود. 

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید جستجو در آن صورت گیرد.
        - query: None (string, required) - عبارت جستجو.
        - reported: false (boolean) - اگر `true` باشد فقط در نمونه‌های گزارش‌شده جستجو می‌کند. اگر`false` باشد فقط در نمونه‌های گزارش‌نشده جستجو می‌کند.
        - tag_"id": (number) - تنها در صورتی مقدار این پارامتر در نتایج اثرگذار است که پارامتر `reported` را برابر `true` قرار داده باشید. اگر اینطور باشد، تنها در گزارش‌هایی جستجو می‌شود که برچسبی با این شناسه به آن الصاق شده باشد.  

    + Body
        {
          "dataset": "persica",
          "query": "اقتصاد مثاومتی",
          "tag_id": 1482,
          "reported": false         
        }        
+ Response 200 (application/json)
        {
          "count": 10,
          "next": null,
          "previous": null,
          "results": [{"id": 11462939,…}, {"id": 4446967,…}, {"id": 4444533,…}, {"id": 4444455,…}, {"id": 4444260,…}, {"id": 4444137,…},…]
        }

## جستجو در داده‌های تصویری  [/api/search_candidate_images/]
عبارتی را در داده‌های تصویری یک دیتاست جستجو می‌کند. نتایج این تابع همانند تابع <a href="#1161e5e4c1">جستجو در داده‌های متنی</a> صفحه‌بندی‌شده و همراه با آدرس صفحات بعدی و قبلی در پاسخ برگشتی است.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید در آن جستجو کنید.
        - query: None (string, required) - عبارت جستجو.
        - tag_"id": (number) - شناسهٔ برچسب. 
    + Body
        {
          "dataset": "iran",
          "query": "برج آزادی",
          "tag_id": 2
        }
+ Response 200 (application/json)
        {
          "count": 10,
          "next": null,
          "previous": null,
          "results": [{"id": 11462939,…}, {"id": 4446967,…}, {"id": 4444533,…}, {"id": 4444455,…}, {"id": 4444260,…}, {"id": 4444137,…},…]
        }

## جستجو در چهره‌ها [/api/search_candidate_faces/]
در تصاویر چهره‌ها جستجو می‌کند.

### نمونه [POST]
+ Request (application/json)
    + Headers
            Authorization: Token TOKEN_KEY
    + Attributes
        - dataset: dataset slug (string, required) - نام دیتاستی که می‌خواهید جستجو در آن صورت گیرد.
        - query: None (string, required) - عبارت جستجو.
        - tag_"id": (number) - شناسهٔ برچسب.
    + Body
        {
          "dataset": "faces",
          "query": " احسان کرمی",
          "tag_id": 213243
        }
+ Response 200 (application/json)
       {"items":[{"url":"https://static1.neshanonline.com/thumbnail/yVTNvWR9IHxN/gK8fHXfDXrqfbFZCqByYQnf9bgWP7DnqxIBUmuF8jDF1YIE8vRbA5t0DEhHhnmOX/Untitled.jpg","width":null,"height":null,"data":{},"processed":null}, ...],"count":76}
